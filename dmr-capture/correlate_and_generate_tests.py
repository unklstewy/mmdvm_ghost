import re
from datetime import datetime

# --- CONFIGURABLE ---
HEX_FILE = "all_dmr_frames.hex"
OUTPUT_FILE = "generated_dmr_tests.go"

# --- PARSERS ---

def parse_udp_frames(hexfile):
    # Example hex block: 11:05:37.123456 ... 0x0000: 4a3da848...
    ts_re = re.compile(r"^(\d{2}:\d{2}:\d{2}\.\d+)")
    hexline_re = re.compile(r'^\s*0x[0-9a-f]+:')
    frames = []
    with open(hexfile) as f:
        lines = f.readlines()
    i = 0
    while i < len(lines):
        m = ts_re.match(lines[i])
        if m:
            timestamp = m.group(1)
            # Collect hex lines until '--' or next timestamp
            hexlines = []
            i += 1
            while i < len(lines) and not ts_re.match(lines[i]) and not lines[i].strip().startswith('--'):
                if hexline_re.match(lines[i]):
                    hexlines.append(''.join(lines[i].split(':',1)[1].split()))
                i += 1
            hexstr = ''.join(hexlines)
            # UDP payload is last 110 hex chars (55 bytes)
            udp_payload = hexstr[-110:]
            if len(udp_payload) == 110:
                payload_bytes = bytes.fromhex(udp_payload)
                frames.append({"timestamp": timestamp, "payload": payload_bytes})
        else:
            i += 1
    return frames

def generate_go_tests(frames, output_file):
    with open(output_file, "w") as f:
        f.write("// Code generated by extract_udp_payloads.py. DO NOT EDIT.\n")
        f.write("package dmr\n\nimport \"testing\"\n\n")
        f.write("func TestDMRFramesFromCapture(t *testing.T) {\n")
        f.write("    testCases := []struct {\n")
        f.write("        name string\n")
        f.write("        payload []byte\n")
        f.write("    }{\n")
        for idx, frame in enumerate(frames):
            arr = ', '.join(f'0x{b:02x}' for b in frame['payload'])
            f.write(f'        {{ name: "Frame_{idx+1}_{frame["timestamp"]}", payload: []byte{{{arr}}} }},\n')
        f.write("    }\n\n")
        f.write("    for _, tc := range testCases {\n")
        f.write("        t.Run(tc.name, func(t *testing.T) {\n")
        f.write("            // TODO: Call your decoder here, e.g. CorrectBPTCData(tc.payload)\n")
        f.write("            t.Logf(\"Payload: %x\", tc.payload)\n")
        f.write("        })\n")
        f.write("    }\n")
        f.write("}\n")

# --- MAIN PIPELINE ---

if __name__ == "__main__":
    frames = parse_udp_frames(HEX_FILE)
    generate_go_tests(frames, OUTPUT_FILE)
    print(f"Generated {len(frames)} test cases in {OUTPUT_FILE}")
